{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 20, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lkn4/OneDrive%20-%20University%20of%20Illinois%20-%20Urbana/Desktop/campus-dashboard/frontend/pages/api/classes.ts"],"sourcesContent":["import type { NextApiRequest, NextApiResponse } from 'next';\r\nimport classes from '../../data/raw/classes.json';\r\n\r\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\r\n  const query = (req.query.q as string || '').toLowerCase().trim();\r\n\r\n  // If the query is empty, return an empty array\r\n  if (!query) {\r\n    return res.status(200).json([]);\r\n  }\r\n\r\n  // Split query into words for more flexible matching\r\n  const queryWords = query.split(/\\s+/);\r\n\r\n  const filtered = classes\r\n    .filter(cls => {\r\n      const code = cls.code?.toLowerCase().replace(/\\s+/g, '') || '';\r\n      const name = cls.name?.toLowerCase() || '';\r\n\r\n      // Check if every word in query is found in name or code\r\n      return queryWords.every(word =>\r\n        name.includes(word) || code.includes(word)\r\n      );\r\n    })\r\n    .sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n  res.status(200).json(filtered);\r\n}\r\n"],"names":[],"mappings":";;;AACA;;AAEe,SAAS,QAAQ,GAAmB,EAAE,GAAoB;IACvE,MAAM,QAAQ,CAAC,IAAI,KAAK,CAAC,CAAC,IAAc,EAAE,EAAE,WAAW,GAAG,IAAI;IAE9D,+CAA+C;IAC/C,IAAI,CAAC,OAAO;QACV,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC,EAAE;IAChC;IAEA,oDAAoD;IACpD,MAAM,aAAa,MAAM,KAAK,CAAC;IAE/B,MAAM,WAAW,8FAAA,CAAA,UAAO,CACrB,MAAM,CAAC,CAAA;QACN,MAAM,OAAO,IAAI,IAAI,EAAE,cAAc,QAAQ,QAAQ,OAAO;QAC5D,MAAM,OAAO,IAAI,IAAI,EAAE,iBAAiB;QAExC,wDAAwD;QACxD,OAAO,WAAW,KAAK,CAAC,CAAA,OACtB,KAAK,QAAQ,CAAC,SAAS,KAAK,QAAQ,CAAC;IAEzC,GACC,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,IAAI,CAAC,aAAa,CAAC,EAAE,IAAI;IAE7C,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;AACvB","debugId":null}}]
}